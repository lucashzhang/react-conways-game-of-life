{"version":3,"sources":["ReduxUtil/constants.js","GameUtil/index.js","ReduxUtil/actions.js","Components/Board.js","Components/Menu/MenuButtons.js","Components/Menu/MenuSettings.js","Components/Menu/MenuScore.js","Components/Menu/MenuPatterns.js","Components/Menu/Menu.js","Components/App.js","serviceWorker.js","ReduxUtil/reducers.js","index.js","ReduxUtil/index.js"],"names":["constants","RUN_STOP","UPDATE_BOARD","UPDATE_SIZE","UPDATE_SCORE","UPDATE_TIMER","TOGGLE_TORUS","SAVE_PATTERN","DELETE_PATTERN","SELECT_PATTERN","countPop","y","x","board","gridSize","isTorus","isAliveSpot","startStop","isRunning","type","C","payload","updateBoard","updateGridSize","clearBoard","dispatch","getState","newBoard","Array","fill","map","batch","setCurrPattern","updateScore","toggleTorus","score","pattern","savePattern","currDate","Date","currBoard","savedPatterns","some","p","JSON","stringify","date","boardTiles","torusMode","toString","startstop","handleRadio","handleBoardTick","nextBoard","numAlive","alivePops","updateGame","oldScore","incrementScore","Board","props","state","interval","canvasRef","React","createRef","gridHeight","squareHeight","this","setGridDimensions","updateCanvas","prevProps","setState","setInterval","timerInterval","clearInterval","current","height","ctx","getContext","clearRect","width","forEach","row","i","tile","j","fillStyle","fillRect","e","Math","floor","clientX","target","offsetLeft","clientY","offsetTop","calcIndex","handleTileClick","id","onMouseMove","handleHover","onClick","handleClick","onMouseLeave","ref","Component","connect","ownProps","timer","slice","Menu","handleStart","runGame","unsetCurrPattern","className","Button","variant","randomFill","fullWidth","numberToFill","random","MenuSettings","timerSpeed","Slider","defaultValue","step","min","max","valueLabelDisplay","onChange","value","handleGridSlider","handleTimerSlider","Switch","color","checked","handleTorus","updateTimer","MenuScore","toExponential","handleSave","onMouseOut","resetPattern","history","key","Radio","currPattern","handleRadioChange","IconButton","handlePatternDelete","length","nextPattern","handleAccordion","panel","event","isExpanded","expanded","Accordion","square","AccordionSummary","AccordionDetails","MenuPatterns","MenuButtons","App","Boolean","window","location","hostname","match","combineReducers","action","concat","sort","a","b","filter","store","createStore","appReducer","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.597f45d9.chunk.js","sourcesContent":["const constants = {\n\t// ADD_DAY: \"ADD_DAY\",\n\t// REMOVE_DAY: \"REMOVE_DAY\",\n\t// SET_GOAL: \"SET_GOAL\",\n\t// ADD_ERROR: \"ADD_ERROR\",\n\t// CLEAR_ERROR: \"CLEAR_ERROR\",\n\t// FETCH_RESORT_NAMES: \"FETCH_RESORT_NAMES\",\n\t// CANCEL_FETCHING: \"CANCEL_FETCHING\",\n\t// CHANGE_SUGGESTIONS: \"CHANGE_SUGGESTIONS\",\n    // CLEAR_SUGGESTIONS: \"CLEAR_SUGGESTIONS\"\n    RUN_STOP: \"RUN_STOP\",\n    UPDATE_BOARD: \"UPDATE_BOARD\",\n\tUPDATE_SIZE: \"UPDATE_SIZE\",\n\tUPDATE_SCORE: \"UPDATE_SCORE\",\n\tUPDATE_TIMER: \"UPDATE_TIMER\",\n\tTOGGLE_TORUS: \"TOGGLE_TORUS\",\n\tSAVE_PATTERN: \"SAVE_PATTERN\",\n\tDELETE_PATTERN: \"DELETE_PATTERN\",\n\tSELECT_PATTERN: \"SELECT_PATTERN\"\n}\n\nexport default constants","export default (board, gridSize, isTorus) => {\n    let nextBoard = new Array(gridSize).fill(false).map(() => new Array(gridSize).fill(false));\n    let numAlive = gridSize * gridSize;\n\n    for (let y = 0; y < gridSize; y++) {\n        for (let x = 0; x < gridSize; x++) {\n            let alivePops = countPop(y, x, board, gridSize, isTorus);\n            if (board[y][x] && alivePops >= 2 && alivePops <= 3) {\n                nextBoard[y][x] = true\n            } else if (!board[y][x] && alivePops === 3) {\n                nextBoard[y][x] = true\n            } else {\n                numAlive--;\n            }\n        }\n    }\n    return { nextBoard, numAlive };\n}\n\nfunction countPop(y, x, board, gridSize, isTorus) {\n\n    return isAliveSpot(y - 1, x - 1, board, gridSize, isTorus)\n        + isAliveSpot(y - 1, x + 0, board, gridSize, isTorus)\n        + isAliveSpot(y - 1, x + 1, board, gridSize, isTorus)\n        + isAliveSpot(y + 0, x - 1, board, gridSize, isTorus)\n        + isAliveSpot(y + 0, x + 1, board, gridSize, isTorus)\n        + isAliveSpot(y + 1, x - 1, board, gridSize, isTorus)\n        + isAliveSpot(y + 1, x + 0, board, gridSize, isTorus)\n        + isAliveSpot(y + 1, x + 1, board, gridSize, isTorus);\n}\n\nfunction isAliveSpot(y, x, board, gridSize, isTorus) {\n    if (isTorus) {\n        if (x >= gridSize) {\n            x -= gridSize;\n        } else if (x < 0) {\n            x += gridSize;\n        }\n        if (y >= gridSize) {\n            y -= gridSize;\n        } else if (y < 0) {\n            y += gridSize;\n        }\n    }\n    if (y >= 0 && x < gridSize && y >= 0 && y < gridSize) {\n        if (board[y][x]) {\n            return 1;\n        }\n    }\n    return 0;\n}","import C from './constants';\nimport { batch } from 'react-redux';\nimport updateGame from '../GameUtil';\n\nexport const startStop = isRunning => {\n    return {\n        type: C.RUN_STOP,\n        payload: !isRunning\n    }\n}\n\nexport const updateBoard = board => {\n    return {\n        type: C.UPDATE_BOARD,\n        payload: board\n    }\n}\n\nexport const updateGridSize = gridSize => {\n    return {\n        type: C.UPDATE_SIZE,\n        payload: gridSize\n    }\n}\n\nexport const randomFillBoard = () => (dispatch, getState) => {\n    let gridSize = getState().board.gridSize;\n    let newBoard = new Array(gridSize).fill(false).map(() => new Array(gridSize).fill(false));\n\n    let numberToFill = Math.floor(Math.random() * (gridSize * gridSize - 6 * gridSize) + 5 * gridSize)\n\n    for (let i = 0; i < numberToFill; i++) {\n        let x = Math.floor(Math.random() * gridSize);\n        let y = Math.floor(Math.random() * gridSize);\n\n        newBoard[x][y] = true;\n    }\n\n    batch(() => {\n        dispatch(startStop(true))\n        dispatch(updateBoard(newBoard))\n        dispatch(updateScore(0))\n    })\n}\n\nexport const clearBoard = () => (dispatch, getState) => {\n    let gridSize = getState().board.gridSize;\n    let newBoard = new Array(gridSize).fill(false).map(() => new Array(gridSize).fill(false));\n\n    // replaces current board with an empty board, stops game\n    batch(() => {\n        dispatch((setCurrPattern(\"initial\")));\n        dispatch(startStop(true))\n        dispatch(updateBoard(newBoard))\n        dispatch(updateScore(0))\n    })\n}\n\nexport const handleGridSlider = gridSize => dispatch => {\n\n    dispatch(updateGridSize(gridSize))\n    dispatch(clearBoard())\n}\n\nexport const toggleTorus = isTorus => {\n    return {\n        type: C.TOGGLE_TORUS,\n        payload: !isTorus\n    }\n}\n\nexport const updateTimer = interval => {\n    return {\n        type: C.UPDATE_TIMER,\n        payload: interval\n    }\n}\n\nexport const updateScore = score => {\n    return {\n        type: C.UPDATE_SCORE,\n        payload: score\n    }\n}\n\nexport const incrementScore = (oldScore, numAlive) => {\n    let newScore = oldScore + numAlive\n    return {\n        type: C.UPDATE_SCORE,\n        payload: newScore\n    }\n}\n\nexport const setCurrPattern = pattern => {\n    return {\n        type: C.SELECT_PATTERN,\n        payload: pattern\n    }\n}\n\nexport const savePattern = () => (dispatch, getState) => {\n    let currDate = new Date()\n    let currBoard = getState().board\n\n    if (!getState().board.savedPatterns.some(p => JSON.stringify(p.board) === JSON.stringify(currBoard))) {\n        batch(() => {\n            dispatch({\n                type: C.SAVE_PATTERN,\n                payload: {\n                    date: currDate,\n                    board: currBoard.boardTiles,\n                    gridSize: currBoard.gridSize,\n                    score: currBoard.score,\n                    isTorus: currBoard.torusMode\n                }\n            })\n            dispatch(setCurrPattern(currDate.toString()))\n        })\n    }\n    if (getState().startstop) {\n        dispatch(setCurrPattern('initial'))\n    }\n}\n\nexport const handleRadio = pattern => dispatch => {\n    batch(() => {\n        dispatch(updateBoard(pattern.board));\n        dispatch(setCurrPattern(pattern.date.toString()));\n        dispatch(updateScore(pattern.score));\n        dispatch(toggleTorus(!pattern.isTorus));\n        dispatch(updateGridSize(pattern.gridSize));\n    })\n}\n\nexport const handlePatternDelete = date => (dispatch, getState) => {\n    let currPattern = getState().board.currPattern;\n    dispatch({\n        type: C.DELETE_PATTERN,\n        payload: date\n    })\n    // Move save as needed\n    if (currPattern === date.toString()) {\n        if (getState().board.savedPatterns.length > 0) {\n            let nextPattern = getState().board.savedPatterns[0];\n            dispatch(handleRadio(nextPattern))\n        } else {\n            dispatch(clearBoard())\n        }\n    }\n}\n\nexport const handleTileClick = (x, y) => (dispatch, getState) => {\n    let newBoard = getState().board.boardTiles.map((row) => row.slice())\n    newBoard[y][x] = !newBoard[y][x];\n    batch(() => {\n        dispatch(updateBoard(newBoard));\n        dispatch(startStop(true));\n        dispatch(updateScore(0));\n    })\n}\n\nexport const handleBoardTick = () => (dispatch, getState) => {\n    const board = getState().board\n    let { nextBoard, numAlive } = updateGame(board.boardTiles, board.gridSize, board.torusMode)\n\n    batch(() => {\n        dispatch(updateBoard(nextBoard))\n        dispatch(incrementScore(board.score, numAlive))\n    })\n    if (numAlive === 0) {\n        dispatch(startStop(true))\n    }\n}","import React from 'react';\nimport { connect } from 'react-redux';\nimport { handleTileClick, handleBoardTick, savePattern } from '../ReduxUtil/actions';\nimport '../CSS/Board.css';\n\nclass Board extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            interval: null,\n            board: this.props.board\n        }\n        this.canvasRef = React.createRef();\n        this.gridHeight = 0;\n        this.squareHeight = 0;\n    }\n\n    componentDidMount() {\n        this.setGridDimensions();\n        this.updateCanvas();\n    }\n\n    componentDidUpdate(prevProps) {\n        if (prevProps.isRunning !== this.props.isRunning && this.props.isRunning) {\n            this.setState({\n                interval: setInterval(() => this.updateBoard(), this.props.timerInterval)\n            })\n        } else if (prevProps.isRunning !== this.props.isRunning && !this.props.isRunning) {\n            clearInterval(this.state.interval)\n        }\n        if (prevProps.gridSize !== this.props.gridSize || prevProps.board !== this.props.board) {\n            this.setGridDimensions();\n            this.updateCanvas();\n        }\n        if (prevProps.timerInterval !== this.props.timerInterval && this.props.isRunning) {\n            clearInterval(this.state.interval);\n            this.setState({\n                interval: setInterval(() => this.updateBoard(), this.props.timerInterval)\n            })\n        }\n    }\n\n    updateBoard() {\n        this.props.handleBoardTick()\n        this.updateCanvas();\n    }\n\n    setGridDimensions() {\n        this.gridHeight = (this.canvasRef.current.height / this.props.gridSize);\n        this.squareHeight = (this.gridHeight * 0.9);\n    }\n\n    updateCanvas(x = null, y = null) {\n        const ctx = this.canvasRef.current.getContext('2d');\n        ctx.clearRect(0, 0, this.canvasRef.current.width, this.canvasRef.current.height);\n\n        this.props.board.forEach((row, i) => {\n            row.forEach((tile, j) => {\n                ctx.fillStyle = tile || (y === i && x === j) ? \"#4A473E\" : \"#B3AE99\";\n                ctx.fillRect(j * this.gridHeight, i * this.gridHeight, this.squareHeight, this.squareHeight);\n            })\n        });\n    }\n\n    calcIndex(e) {\n        let x = Math.floor((e.clientX - e.target.offsetLeft) / this.gridHeight);\n        let y = Math.floor((e.clientY - e.target.offsetTop) / this.gridHeight);\n        return {x, y}\n    }\n\n    handleHover(e) {\n        let {x, y} = this.calcIndex(e)\n        this.updateCanvas(x, y);\n    }\n\n    async handleClick(e) {\n        let {x, y} = this.calcIndex(e)\n        await this.props.handleTileClick(x, y)\n\n        this.updateCanvas();\n    }\n\n    render() {\n        return <canvas\n            id=\"lucas-game-board\"\n            onMouseMove={(e) => this.handleHover(e)}\n            onClick={(e) => this.handleClick(e)}\n            onMouseLeave={() => this.updateCanvas()}\n            ref={this.canvasRef}\n            width={700}\n            height={700}\n        />\n    }\n}\n\nconst mapStateToProps = (state, ownProps) => {\n    return {\n        board: state.board.boardTiles,\n        gridSize: state.board.gridSize,\n        isRunning: state.startstop,\n        timerInterval: state.timer,\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        handleTileClick(x, y) {\n            dispatch(\n                handleTileClick(x, y)\n            )\n        },\n        handleBoardTick() {\n            dispatch(\n                handleBoardTick()\n            )\n        },\n        savePattern(board) {\n            dispatch(\n                savePattern(board)\n            )\n        }\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Board)\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { Button } from '@material-ui/core';\nimport { startStop, randomFillBoard, clearBoard, savePattern, setCurrPattern } from '../../ReduxUtil/actions';\nimport '../../CSS/Menu.css';\n\nclass Menu extends React.Component {\n\n    handleStart = () => {\n        this.props.runGame(this.props.isRunning)\n\n        if (!this.props.isRunning && this.props.score === 0) {\n            this.props.savePattern()\n        } else if (!this.props.isRunning) {\n            this.props.unsetCurrPattern();\n        }\n    }\n\n    render() {\n        return <div className={this.props.className}>\n            <Button variant=\"contained\" onClick={this.props.clearBoard}>Clear Pattern</Button>\n            <Button variant=\"contained\" onClick={this.props.randomFill}>Random Pattern</Button>\n            <Button variant=\"contained\" fullWidth onClick={this.handleStart}>{this.props.isRunning ? \"Stop\" : \"Start\"}</Button>\n        </div>\n    }\n}\n\n\nconst mapStateToProps = state => {\n    return {\n        isRunning: state.startstop,\n        score: state.board.score\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        runGame(isRunning) {\n            dispatch(\n                startStop(isRunning)\n            )\n        },\n        randomFill() {\n            dispatch(\n                randomFillBoard()\n            )\n        },\n        clearBoard() {\n            dispatch(\n                clearBoard()\n            )\n        },\n        savePattern() {\n            dispatch(\n                savePattern()\n            )\n        },\n        unsetCurrPattern() {\n            dispatch(\n                setCurrPattern('initial')\n            )\n        }\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Menu)\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { Slider, Switch } from '@material-ui/core';\nimport { handleGridSlider, updateTimer, toggleTorus } from '../../ReduxUtil/actions';\nimport '../../CSS/Menu.css';\n\nclass MenuSettings extends React.Component {\n    constructor(props) {\n        super(props);\n        this.gridSize = this.props.gridSize;\n        this.timerSpeed = this.props.timerSpeed;\n    }\n\n    render() {\n        return <div className={this.props.className}>\n            <div className=\"lucas-menu-options\">\n                <p>Grid Size</p>\n                <Slider\n                    defaultValue={this.gridSize}\n                    step={1}\n                    min={10}\n                    max={100}\n                    valueLabelDisplay=\"auto\"\n                    className=\"lucas-menu-control\"\n                    onChange={(e, value) => this.props.handleGridSlider(value)}\n                />\n            </div>\n            <div className=\"lucas-menu-options\">\n                <p>Tick Interval (ms)</p>\n                <Slider\n                    defaultValue={this.timerSpeed}\n                    step={10}\n                    min={10}\n                    max={1000}\n                    valueLabelDisplay=\"auto\"\n                    className=\"lucas-menu-control\"\n                    onChange={(e, value) => this.props.handleTimerSlider(value)}\n                />\n            </div>\n            <div className=\"lucas-menu-options\">\n                <p>Torus Mode</p>\n                <Switch\n                    color=\"default\"\n                    className=\"lucas-menu-control\"\n                    checked={this.props.isTorus}\n                    onClick={() => this.props.handleTorus(this.props.isTorus)}\n                />\n            </div>\n        </div>\n    }\n}\n\n\nconst mapStateToProps = state => {\n    return {\n        gridSize: state.board.gridSize,\n        isTorus: state.board.torusMode,\n        timerSpeed: state.timer\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        handleGridSlider(gridSize) {\n            dispatch(\n                handleGridSlider(gridSize)\n            )\n        },\n        handleTimerSlider(interval) {\n            dispatch(\n                updateTimer(interval)\n            )\n        },\n        handleTorus(isTorus) {\n            dispatch(\n                toggleTorus(isTorus)\n            )\n        }\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MenuSettings)\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport '../../CSS/Menu.css';\n\nclass MenuScore extends React.Component {\n    render() {\n        return <div className={this.props.className}>\n            <h4>Score:</h4>\n            <h1>{this.props.score < 9999999 ? this.props.score : this.props.score.toExponential(7)}</h1>\n        </div>\n    }\n}\n\n\nconst mapStateToProps = state => {\n    return {\n        score: state.board.score\n    }\n}\n\nexport default connect(mapStateToProps)(MenuScore)\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { Radio, IconButton, Button } from '@material-ui/core';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport { handlePatternDelete, handleRadio, savePattern } from '../../ReduxUtil/actions';\nimport '../../CSS/Menu.css';\n\nclass MenuSettings extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n\n    handleSave = () => {\n        this.props.savePattern();\n    }\n\n    render() {\n        return <div className={this.props.className} onMouseOut={this.resetPattern}>\n            <Button variant=\"contained\" fullWidth onClick={this.handleSave}>Save Current Pattern</Button>\n            <div className=\"lucas-menu-saved-patterns\">\n                {this.props.history.map((pattern) => (\n                    <div className=\"lucas-menu-options\" key={pattern.date.toString()}>\n                        <Radio\n                            checked={this.props.currPattern === pattern.date.toString()}\n                            onChange={() => this.props.handleRadioChange(pattern)}\n                        ></Radio>\n                        <h4>{pattern.date.toString().slice(0, -33)}</h4>\n                        <IconButton className=\"lucas-menu-control\" onClick={() => this.props.handlePatternDelete(pattern.date)}><DeleteIcon></DeleteIcon></IconButton>\n                    </div>\n                ))}\n            </div>\n        </div>\n    }\n}\n\n\nconst mapStateToProps = state => {\n    return {\n        history: state.board.savedPatterns,\n        currPattern: state.board.currPattern,\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        handleRadioChange(pattern) {\n            dispatch(\n                handleRadio(pattern)\n            )\n        },\n        handlePatternDelete(date) {\n            dispatch(\n                handlePatternDelete(date)\n            )\n        },\n        savePattern() {\n            dispatch(\n                savePattern()\n            )\n        }\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MenuSettings)\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { Accordion, AccordionSummary, AccordionDetails } from '@material-ui/core';\nimport MenuButtons from './MenuButtons';\nimport MenuSettings from './MenuSettings';\nimport MenuScore from './MenuScore';\nimport MenuPatterns from './MenuPatterns';\nimport '../../CSS/Menu.css';\n\nclass Menu extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            expanded: \"instructions\"\n        }\n    }\n\n    handleAccordion = (panel) => (event, isExpanded) => {\n        if (isExpanded) {\n            this.setState({\n                expanded: panel\n            })\n        } else {\n            this.setState({\n                expanded: false\n            })\n        }\n    }\n\n    render() {\n        return <div className=\"lucas-menu\">\n            <MenuScore className=\"lucas-menu-score\"></MenuScore>\n            <Accordion square expanded={this.state.expanded === 'instructions'} onChange={this.handleAccordion('instructions')}>\n                <AccordionSummary>Instructions</AccordionSummary>\n                <AccordionDetails>lorem ipsum dolors</AccordionDetails>\n            </Accordion>\n            <Accordion square expanded={this.state.expanded === 'settings'} onChange={this.handleAccordion('settings')}>\n                <AccordionSummary>Settings</AccordionSummary>\n                <AccordionDetails><MenuSettings className=\"lucas-menu-settings\"></MenuSettings></AccordionDetails>\n            </Accordion>\n            <Accordion square expanded={this.state.expanded === 'patterns'} onChange={this.handleAccordion('patterns')}>\n                <AccordionSummary>Previous Patterns</AccordionSummary>\n                <AccordionDetails><MenuPatterns className=\"lucas-menu-patterns\"></MenuPatterns></AccordionDetails>\n            </Accordion>\n            <MenuButtons className=\"lucas-menu-buttons\"></MenuButtons>\n        </div>\n    }\n}\n\n\nconst mapStateToProps = state => {\n    return {\n        \n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        \n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Menu)\n","import React from 'react';\nimport Board from './Board';\nimport Menu from './Menu/Menu';\nimport '../CSS/App.css';\n\n// import bgmusic from '../assets/NieRAutomataAmusementPark.mp3';\n\nfunction App() {\n  return (\n    <div className=\"lucas-app\">\n      <Board />\n      <Menu />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import C from './constants';\nimport { combineReducers } from 'redux'\n\nexport const startstop = (state = false, action) => {\n    switch (action.type) {\n        case C.RUN_STOP:\n            return action.payload;\n        default:\n            return state;\n    }\n}\n\nexport const boardTiles = (state = new Array(10).fill(false).map(() => new Array(10).fill(false)), action) => {\n    switch (action.type) {\n        case C.UPDATE_BOARD:\n            return action.payload;\n        default:\n            return state;\n    }\n}\n\nexport const gridSize = (state = 10, action) => {\n    switch (action.type) {\n        case C.UPDATE_SIZE:\n            return action.payload;\n        default:\n            return state;\n    }\n}\n\nexport const savedPatterns = (state = [], action) => {\n    switch (action.type) {\n        case C.SAVE_PATTERN:\n            return state.concat(action.payload).sort((a, b) => b.date - a.date)\n        case C.DELETE_PATTERN:\n            return state.filter(pattern => pattern.date !== action.payload)\n        default:\n            return state\n    }\n}\n\nexport const currPattern = (state = \"initial\", action) => {\n    switch (action.type) {\n        case C.SELECT_PATTERN:\n            return action.payload;\n        default:\n            return state\n    }\n}\n\nexport const score = (state = 0, action) => {\n    switch (action.type) {\n        case C.UPDATE_SCORE:\n            return action.payload;\n        default:\n            return state;\n    }\n}\n\nexport const timer = (state = 500, action) => {\n    switch (action.type) {\n        case C.UPDATE_TIMER:\n            return action.payload;\n        default:\n            return state;\n    }\n}\n\nexport const torusMode = (state = false, action) => {\n    switch (action.type) {\n        case C.TOGGLE_TORUS:\n            return action.payload;\n        default:\n            return state;\n    }\n}\n\nexport default combineReducers({\n    startstop,\n    timer,\n    board: combineReducers({\n        boardTiles,\n        gridSize,\n        score,\n        savedPatterns,\n        currPattern,\n        torusMode,\n    })\n})","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './CSS/index.css';\nimport App from './Components/App';\nimport * as serviceWorker from './serviceWorker';\nimport initStore from './ReduxUtil';\nimport { Provider } from 'react-redux';\n\nconst store = initStore();\nwindow.store = store;\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App/>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import { createStore, applyMiddleware } from 'redux'\nimport appReducer from './reducers'\nimport thunk from 'redux-thunk'\n\nexport default () => {\n\treturn createStore(appReducer, applyMiddleware(thunk));\n}\n\n// export default (initialState={}) => {\n// \treturn applyMiddleware(thunk)(createStore)(appReducer, initialState)\n// }"],"sourceRoot":""}