{"version":3,"sources":["ReduxUtil/constants.js","GameUtil/index.js","ReduxUtil/actions.js","Components/Board.js","Components/Menu/MenuButtons.js","Components/Menu/MenuSettings.js","Components/Menu/MenuScore.js","Components/Menu/MenuPatterns.js","Components/Menu/MenuInstructions.js","Components/Menu/Menu.js","Components/App.js","serviceWorker.js","ReduxUtil/reducers.js","index.js","ReduxUtil/index.js"],"names":["constants","RUN_STOP","UPDATE_BOARD","UPDATE_SIZE","UPDATE_SCORE","UPDATE_TIMER","TOGGLE_TORUS","SAVE_PATTERN","DELETE_PATTERN","SELECT_PATTERN","countPop","y","x","board","gridSize","isTorus","isAliveSpot","startStop","isRunning","type","C","payload","updateBoard","updateGridSize","clearBoard","dispatch","getState","newBoard","Array","fill","map","batch","setCurrPattern","updateScore","toggleTorus","score","pattern","savePattern","currDate","Date","currBoard","savedPatterns","some","p","JSON","stringify","boardTiles","date","torusMode","toString","startstop","handleRadio","handleBoardTick","nextBoard","numAlive","alivePops","updateGame","oldScore","incrementScore","Board","props","updateDimension","setState","dimension","window","innerHeight","setGridDimensions","updateCanvas","state","interval","canvasRef","React","createRef","gridHeight","squareHeight","this","addEventListener","removeEventListener","prevProps","setInterval","timerInterval","clearInterval","current","height","ctx","getContext","clearRect","width","forEach","row","i","tile","j","fillStyle","fillRect","e","Math","floor","clientX","target","offsetLeft","clientY","offsetTop","calcIndex","handleTileClick","id","onMouseMove","handleHover","onClick","handleClick","onMouseLeave","ref","Component","connect","ownProps","timer","slice","Menu","handleStart","runGame","unsetCurrPattern","className","Button","variant","color","randomFill","numberToFill","random","MenuSettings","timerSpeed","Slider","defaultValue","step","min","max","valueLabelDisplay","onChange","value","handleGridSlider","handleTimerSlider","Switch","checked","handleTorus","updateTimer","MenuScore","toExponential","handleSave","onMouseOut","resetPattern","fullWidth","history","key","Radio","currPattern","handleRadioChange","IconButton","handlePatternDelete","length","nextPattern","MenuInstructions","Link","href","handleAccordion","panel","event","isExpanded","expanded","Accordion","square","AccordionSummary","AccordionDetails","MenuPatterns","MenuButtons","App","Boolean","location","hostname","match","combineReducers","action","concat","sort","a","b","filter","store","createStore","appReducer","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.2996ba25.chunk.js","sourcesContent":["const constants = {\n\t// ADD_DAY: \"ADD_DAY\",\n\t// REMOVE_DAY: \"REMOVE_DAY\",\n\t// SET_GOAL: \"SET_GOAL\",\n\t// ADD_ERROR: \"ADD_ERROR\",\n\t// CLEAR_ERROR: \"CLEAR_ERROR\",\n\t// FETCH_RESORT_NAMES: \"FETCH_RESORT_NAMES\",\n\t// CANCEL_FETCHING: \"CANCEL_FETCHING\",\n\t// CHANGE_SUGGESTIONS: \"CHANGE_SUGGESTIONS\",\n    // CLEAR_SUGGESTIONS: \"CLEAR_SUGGESTIONS\"\n    RUN_STOP: \"RUN_STOP\",\n    UPDATE_BOARD: \"UPDATE_BOARD\",\n\tUPDATE_SIZE: \"UPDATE_SIZE\",\n\tUPDATE_SCORE: \"UPDATE_SCORE\",\n\tUPDATE_TIMER: \"UPDATE_TIMER\",\n\tTOGGLE_TORUS: \"TOGGLE_TORUS\",\n\tSAVE_PATTERN: \"SAVE_PATTERN\",\n\tDELETE_PATTERN: \"DELETE_PATTERN\",\n\tSELECT_PATTERN: \"SELECT_PATTERN\"\n}\n\nexport default constants","export default (board, gridSize, isTorus) => {\n    let nextBoard = new Array(gridSize).fill(false).map(() => new Array(gridSize).fill(false));\n    let numAlive = gridSize * gridSize;\n\n    for (let y = 0; y < gridSize; y++) {\n        for (let x = 0; x < gridSize; x++) {\n            let alivePops = countPop(y, x, board, gridSize, isTorus);\n            if (board[y][x] && alivePops >= 2 && alivePops <= 3) {\n                nextBoard[y][x] = true\n            } else if (!board[y][x] && alivePops === 3) {\n                nextBoard[y][x] = true\n            } else {\n                numAlive--;\n            }\n        }\n    }\n    return { nextBoard, numAlive };\n}\n\nfunction countPop(y, x, board, gridSize, isTorus) {\n\n    return isAliveSpot(y - 1, x - 1, board, gridSize, isTorus)\n        + isAliveSpot(y - 1, x + 0, board, gridSize, isTorus)\n        + isAliveSpot(y - 1, x + 1, board, gridSize, isTorus)\n        + isAliveSpot(y + 0, x - 1, board, gridSize, isTorus)\n        + isAliveSpot(y + 0, x + 1, board, gridSize, isTorus)\n        + isAliveSpot(y + 1, x - 1, board, gridSize, isTorus)\n        + isAliveSpot(y + 1, x + 0, board, gridSize, isTorus)\n        + isAliveSpot(y + 1, x + 1, board, gridSize, isTorus);\n}\n\nfunction isAliveSpot(y, x, board, gridSize, isTorus) {\n    if (isTorus) {\n        if (x >= gridSize) {\n            x -= gridSize;\n        } else if (x < 0) {\n            x += gridSize;\n        }\n        if (y >= gridSize) {\n            y -= gridSize;\n        } else if (y < 0) {\n            y += gridSize;\n        }\n    }\n    if (y >= 0 && x < gridSize && y >= 0 && y < gridSize) {\n        if (board[y][x]) {\n            return 1;\n        }\n    }\n    return 0;\n}","import C from './constants';\nimport { batch } from 'react-redux';\nimport updateGame from '../GameUtil';\n\nexport const startStop = isRunning => {\n    return {\n        type: C.RUN_STOP,\n        payload: !isRunning\n    }\n}\n\nexport const updateBoard = board => {\n    return {\n        type: C.UPDATE_BOARD,\n        payload: board\n    }\n}\n\nexport const updateGridSize = gridSize => {\n    return {\n        type: C.UPDATE_SIZE,\n        payload: gridSize\n    }\n}\n\nexport const randomFillBoard = () => (dispatch, getState) => {\n    let gridSize = getState().board.gridSize;\n    let newBoard = new Array(gridSize).fill(false).map(() => new Array(gridSize).fill(false));\n\n    let numberToFill = Math.floor(Math.random() * (gridSize * gridSize - 6 * gridSize) + 5 * gridSize)\n\n    for (let i = 0; i < numberToFill; i++) {\n        let x = Math.floor(Math.random() * gridSize);\n        let y = Math.floor(Math.random() * gridSize);\n\n        newBoard[x][y] = true;\n    }\n\n    batch(() => {\n        dispatch(startStop(true))\n        dispatch(updateBoard(newBoard))\n        dispatch(updateScore(0))\n    })\n}\n\nexport const clearBoard = () => (dispatch, getState) => {\n    let gridSize = getState().board.gridSize;\n    let newBoard = new Array(gridSize).fill(false).map(() => new Array(gridSize).fill(false));\n\n    // replaces current board with an empty board, stops game\n    batch(() => {\n        dispatch((setCurrPattern(\"initial\")));\n        dispatch(startStop(true))\n        dispatch(updateBoard(newBoard))\n        dispatch(updateScore(0))\n    })\n}\n\nexport const handleGridSlider = gridSize => dispatch => {\n\n    dispatch(updateGridSize(gridSize))\n    dispatch(clearBoard())\n}\n\nexport const toggleTorus = isTorus => {\n    return {\n        type: C.TOGGLE_TORUS,\n        payload: !isTorus\n    }\n}\n\nexport const updateTimer = interval => {\n    return {\n        type: C.UPDATE_TIMER,\n        payload: interval\n    }\n}\n\nexport const updateScore = score => {\n    return {\n        type: C.UPDATE_SCORE,\n        payload: score\n    }\n}\n\nexport const incrementScore = (oldScore, numAlive) => {\n    let newScore = oldScore + numAlive\n    return {\n        type: C.UPDATE_SCORE,\n        payload: newScore\n    }\n}\n\nexport const setCurrPattern = pattern => {\n    return {\n        type: C.SELECT_PATTERN,\n        payload: pattern\n    }\n}\n\nexport const savePattern = () => (dispatch, getState) => {\n    let currDate = new Date()\n    let currBoard = getState().board\n\n    if (!getState().board.savedPatterns.some(p => JSON.stringify(p.board) === JSON.stringify(currBoard.boardTiles))) {\n        batch(() => {\n            dispatch({\n                type: C.SAVE_PATTERN,\n                payload: {\n                    date: currDate,\n                    board: currBoard.boardTiles,\n                    gridSize: currBoard.gridSize,\n                    score: currBoard.score,\n                    isTorus: currBoard.torusMode\n                }\n            })\n            dispatch(setCurrPattern(currDate.toString()))\n        })\n    }\n    if (getState().startstop) {\n        dispatch(setCurrPattern('initial'))\n    }\n}\n\nexport const handleRadio = pattern => dispatch => {\n    batch(() => {\n        dispatch(updateBoard(pattern.board));\n        dispatch(setCurrPattern(pattern.date.toString()));\n        dispatch(updateScore(pattern.score));\n        dispatch(toggleTorus(!pattern.isTorus));\n        dispatch(updateGridSize(pattern.gridSize));\n    })\n}\n\nexport const handlePatternDelete = date => (dispatch, getState) => {\n    let currPattern = getState().board.currPattern;\n    dispatch({\n        type: C.DELETE_PATTERN,\n        payload: date\n    })\n    // Move save as needed\n    if (currPattern === date.toString()) {\n        if (getState().board.savedPatterns.length > 0) {\n            let nextPattern = getState().board.savedPatterns[0];\n            dispatch(handleRadio(nextPattern))\n        } else {\n            dispatch(clearBoard())\n        }\n    }\n}\n\nexport const handleTileClick = (x, y) => (dispatch, getState) => {\n    let newBoard = getState().board.boardTiles.map((row) => row.slice())\n    newBoard[y][x] = !newBoard[y][x];\n    batch(() => {\n        dispatch(updateBoard(newBoard));\n        dispatch(startStop(true));\n        dispatch(updateScore(0));\n    })\n}\n\nexport const handleBoardTick = () => (dispatch, getState) => {\n    const board = getState().board\n    let { nextBoard, numAlive } = updateGame(board.boardTiles, board.gridSize, board.torusMode)\n\n    batch(() => {\n        dispatch(updateBoard(nextBoard))\n        dispatch(incrementScore(board.score, numAlive))\n    })\n    if (numAlive === 0) {\n        dispatch(startStop(true))\n    }\n}","import React from 'react';\nimport { connect } from 'react-redux';\nimport { handleTileClick, handleBoardTick, savePattern } from '../ReduxUtil/actions';\nimport '../CSS/Board.css';\n\nclass Board extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            interval: null,\n            board: this.props.board,\n            dimension: 75 * window.innerHeight / 100\n        }\n        this.canvasRef = React.createRef();\n        this.gridHeight = 0;\n        this.squareHeight = 0;\n    }\n\n    componentDidMount() {\n        this.updateDimension()\n        window.addEventListener('resize', this.updateDimension)\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener('resize', () => this.updateDimension())\n    }\n\n    updateDimension = () => {\n        this.setState({\n            dimension: 75 * window.innerHeight / 100\n        });\n        this.setGridDimensions();\n        this.updateCanvas();\n    }\n\n    componentDidUpdate(prevProps) {\n        if (prevProps.isRunning !== this.props.isRunning && this.props.isRunning) {\n            this.setState({\n                interval: setInterval(() => this.updateBoard(), this.props.timerInterval)\n            })\n        } else if (prevProps.isRunning !== this.props.isRunning && !this.props.isRunning) {\n            clearInterval(this.state.interval)\n        }\n        if (prevProps.gridSize !== this.props.gridSize || prevProps.board !== this.props.board) {\n            this.setGridDimensions();\n            this.updateCanvas();\n        }\n        if (prevProps.timerInterval !== this.props.timerInterval && this.props.isRunning) {\n            clearInterval(this.state.interval);\n            this.setState({\n                interval: setInterval(() => this.updateBoard(), this.props.timerInterval)\n            })\n        }\n    }\n\n    updateBoard() {\n        this.props.handleBoardTick()\n        this.updateCanvas();\n    }\n\n    setGridDimensions() {\n        this.gridHeight = (this.canvasRef.current.height / this.props.gridSize);\n        this.squareHeight = (this.gridHeight * 0.9);\n    }\n\n    updateCanvas(x = null, y = null) {\n        const ctx = this.canvasRef.current.getContext('2d');\n        ctx.clearRect(0, 0, this.canvasRef.current.width, this.canvasRef.current.height);\n\n        this.props.board.forEach((row, i) => {\n            row.forEach((tile, j) => {\n                ctx.fillStyle = tile || (y === i && x === j) ? \"#4A473E\" : \"#B3AE99\";\n                ctx.fillRect(j * this.gridHeight, i * this.gridHeight, this.squareHeight, this.squareHeight);\n            })\n        });\n    }\n\n    calcIndex(e) {\n        let x = Math.floor((e.clientX - e.target.offsetLeft) / this.gridHeight);\n        let y = Math.floor((e.clientY - e.target.offsetTop) / this.gridHeight);\n        return { x, y }\n    }\n\n    handleHover(e) {\n        let { x, y } = this.calcIndex(e)\n        this.updateCanvas(x, y);\n    }\n\n    async handleClick(e) {\n        let { x, y } = this.calcIndex(e)\n        await this.props.handleTileClick(x, y)\n\n        this.updateCanvas();\n    }\n\n    render() {\n        return <canvas\n            id=\"lucas-game-board\"\n            onMouseMove={(e) => this.handleHover(e)}\n            onClick={(e) => this.handleClick(e)}\n            onMouseLeave={() => this.updateCanvas()}\n            ref={this.canvasRef}\n            width={this.state.dimension}\n            height={this.state.dimension}\n        />\n    }\n}\n\nconst mapStateToProps = (state, ownProps) => {\n    return {\n        board: state.board.boardTiles,\n        gridSize: state.board.gridSize,\n        isRunning: state.startstop,\n        timerInterval: state.timer,\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        handleTileClick(x, y) {\n            dispatch(\n                handleTileClick(x, y)\n            )\n        },\n        handleBoardTick() {\n            dispatch(\n                handleBoardTick()\n            )\n        },\n        savePattern(board) {\n            dispatch(\n                savePattern(board)\n            )\n        }\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Board)\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { Button } from '@material-ui/core';\nimport { startStop, randomFillBoard, clearBoard, savePattern, setCurrPattern } from '../../ReduxUtil/actions';\nimport '../../CSS/Menu.css';\n\nclass Menu extends React.Component {\n\n    handleStart = () => {\n        this.props.runGame(this.props.isRunning)\n\n        if (!this.props.isRunning && this.props.score === 0) {\n            this.props.savePattern()\n        } else if (!this.props.isRunning) {\n            this.props.unsetCurrPattern();\n        }\n    }\n\n    render() {\n        return <div className={this.props.className}>\n            <Button variant=\"contained\" color=\"primary\" onClick={this.handleStart}>{this.props.isRunning ? \"Stop\" : \"Start\"}</Button>\n            <Button variant=\"contained\" color=\"primary\" onClick={this.props.clearBoard}>Clear Pattern</Button>\n            <Button variant=\"contained\" color=\"primary\" onClick={this.props.randomFill}>Random Pattern</Button>\n        </div>\n    }\n}\n\n\nconst mapStateToProps = state => {\n    return {\n        isRunning: state.startstop,\n        score: state.board.score\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        runGame(isRunning) {\n            dispatch(\n                startStop(isRunning)\n            )\n        },\n        randomFill() {\n            dispatch(\n                randomFillBoard()\n            )\n        },\n        clearBoard() {\n            dispatch(\n                clearBoard()\n            )\n        },\n        savePattern() {\n            dispatch(\n                savePattern()\n            )\n        },\n        unsetCurrPattern() {\n            dispatch(\n                setCurrPattern('initial')\n            )\n        }\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Menu)\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { Slider, Switch } from '@material-ui/core';\nimport { handleGridSlider, updateTimer, toggleTorus } from '../../ReduxUtil/actions';\nimport '../../CSS/Menu.css';\n\nclass MenuSettings extends React.Component {\n    constructor(props) {\n        super(props);\n        this.gridSize = this.props.gridSize;\n        this.timerSpeed = this.props.timerSpeed;\n    }\n\n    render() {\n        return <div className={this.props.className}>\n            <div className=\"lucas-menu-options\">\n                <p>Grid Size</p>\n                <Slider\n                    defaultValue={this.gridSize}\n                    step={1}\n                    min={10}\n                    max={100}\n                    valueLabelDisplay=\"auto\"\n                    className=\"lucas-menu-control\"\n                    onChange={(e, value) => this.props.handleGridSlider(value)}\n                />\n            </div>\n            <div className=\"lucas-menu-options\">\n                <p>Tick Interval (ms)</p>\n                <Slider\n                    defaultValue={this.timerSpeed}\n                    step={10}\n                    min={10}\n                    max={1000}\n                    valueLabelDisplay=\"auto\"\n                    className=\"lucas-menu-control\"\n                    onChange={(e, value) => this.props.handleTimerSlider(value)}\n                />\n            </div>\n            <div className=\"lucas-menu-options\">\n                <p>Torus Mode</p>\n                <Switch\n                    color=\"primary\"\n                    className=\"lucas-menu-control\"\n                    checked={this.props.isTorus}\n                    onClick={() => this.props.handleTorus(this.props.isTorus)}\n                />\n            </div>\n        </div>\n    }\n}\n\n\nconst mapStateToProps = state => {\n    return {\n        gridSize: state.board.gridSize,\n        isTorus: state.board.torusMode,\n        timerSpeed: state.timer\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        handleGridSlider(gridSize) {\n            dispatch(\n                handleGridSlider(gridSize)\n            )\n        },\n        handleTimerSlider(interval) {\n            dispatch(\n                updateTimer(interval)\n            )\n        },\n        handleTorus(isTorus) {\n            dispatch(\n                toggleTorus(isTorus)\n            )\n        }\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MenuSettings)\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport '../../CSS/Menu.css';\n\nclass MenuScore extends React.Component {\n    render() {\n        return <div className={this.props.className}>\n            <h4>Score:</h4>\n            <h1>{this.props.score < 9999999 ? this.props.score : this.props.score.toExponential(7)}</h1>\n        </div>\n    }\n}\n\n\nconst mapStateToProps = state => {\n    return {\n        score: state.board.score\n    }\n}\n\nexport default connect(mapStateToProps)(MenuScore)\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { Radio, IconButton, Button } from '@material-ui/core';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport { handlePatternDelete, handleRadio, savePattern } from '../../ReduxUtil/actions';\nimport '../../CSS/Menu.css';\n\nclass MenuSettings extends React.Component {\n\n    handleSave = () => {\n        this.props.savePattern();\n    }\n\n    render() {\n        return <div className={this.props.className} onMouseOut={this.resetPattern}>\n            <Button variant=\"contained\" color=\"primary\" fullWidth onClick={this.handleSave}>Save Current Pattern</Button>\n            <div className=\"lucas-menu-saved-patterns\">\n                {this.props.history.map((pattern) => (\n                    <div className=\"lucas-menu-options\" key={pattern.date.toString()}>\n                        <Radio\n                            checked={this.props.currPattern === pattern.date.toString()}\n                            color=\"primary\"\n                            onChange={() => this.props.handleRadioChange(pattern)}\n                        ></Radio>\n                        <h4>{pattern.date.toString().slice(0, -33)}</h4>\n                        <IconButton className=\"lucas-menu-control\" color=\"primary\" onClick={() => this.props.handlePatternDelete(pattern.date)}><DeleteIcon></DeleteIcon></IconButton>\n                    </div>\n                ))}\n            </div>\n        </div>\n    }\n}\n\n\nconst mapStateToProps = state => {\n    return {\n        history: state.board.savedPatterns,\n        currPattern: state.board.currPattern,\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        handleRadioChange(pattern) {\n            dispatch(\n                handleRadio(pattern)\n            )\n        },\n        handlePatternDelete(date) {\n            dispatch(\n                handlePatternDelete(date)\n            )\n        },\n        savePattern() {\n            dispatch(\n                savePattern()\n            )\n        }\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MenuSettings)\n","import React from 'react';\nimport { Link } from '@material-ui/core';\nimport '../../CSS/Menu.css';\n\nclass MenuInstructions extends React.Component {\n    render() {\n        return <div className={this.props.className}>\n            <p><Link href=\"https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life\" target=\"_blank\">Conway's Game of Life</Link> is a zero player game that represents cellular automation.</p>\n            <h4>Rules</h4>\n            <ol>\n                <li>Any live cell with fewer than two live neighbours dies, as if by underpopulation.</li>\n                <li>Any live cell with two or three live neighbours lives on to the next generation.</li>\n                <li>Any live cell with more than three live neighbours dies, as if by overpopulation.</li>\n                <li>Any dead cell with exactly three live neighbours becomes a live cell, as if by reproduction.</li>\n            </ol>\n            <p>\n                Click on a board tile to toggle whether it is alive. A dark tile represents a live cell and a light tile represents a dead one.\n                Press start to begin the automation\n            </p>\n        </div>\n    }\n}\n\nexport default MenuInstructions\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { Accordion, AccordionSummary, AccordionDetails } from '@material-ui/core';\nimport MenuButtons from './MenuButtons';\nimport MenuSettings from './MenuSettings';\nimport MenuScore from './MenuScore';\nimport MenuPatterns from './MenuPatterns';\nimport MenuInstructions from './MenuInstructions';\nimport '../../CSS/Menu.css';\n\nclass Menu extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            expanded: \"instructions\"\n        }\n    }\n\n    handleAccordion = (panel) => (event, isExpanded) => {\n        if (isExpanded) {\n            this.setState({\n                expanded: panel\n            })\n        } else {\n            this.setState({\n                expanded: false\n            })\n        }\n    }\n\n    render() {\n        return <div className=\"lucas-menu\">\n            <MenuScore className=\"lucas-menu-score\"></MenuScore>\n            <Accordion square expanded={this.state.expanded === 'instructions'} onChange={this.handleAccordion('instructions')}>\n                <AccordionSummary>Instructions</AccordionSummary>\n                <AccordionDetails><MenuInstructions/></AccordionDetails>\n            </Accordion>\n            <Accordion square expanded={this.state.expanded === 'settings'} onChange={this.handleAccordion('settings')}>\n                <AccordionSummary>Settings</AccordionSummary>\n                <AccordionDetails><MenuSettings className=\"lucas-menu-settings\"/></AccordionDetails>\n            </Accordion>\n            <Accordion square expanded={this.state.expanded === 'patterns'} onChange={this.handleAccordion('patterns')}>\n                <AccordionSummary>Previous Patterns</AccordionSummary>\n                <AccordionDetails><MenuPatterns className=\"lucas-menu-patterns\"/></AccordionDetails>\n            </Accordion>\n            <MenuButtons className=\"lucas-menu-buttons\"></MenuButtons>\n        </div>\n    }\n}\n\n\nconst mapStateToProps = state => {\n    return {\n        \n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        \n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Menu)\n","import React from 'react';\nimport Board from './Board';\nimport Menu from './Menu/Menu';\nimport '../CSS/App.css';\n\n// import bgmusic from '../assets/NieRAutomataAmusementPark.mp3';\n\nfunction App() {\n  return (\n    <div className=\"lucas-app\">\n      <Board />\n      <Menu />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import C from './constants';\nimport { combineReducers } from 'redux'\n\nexport const startstop = (state = false, action) => {\n    switch (action.type) {\n        case C.RUN_STOP:\n            return action.payload;\n        default:\n            return state;\n    }\n}\n\nexport const boardTiles = (state = new Array(10).fill(false).map(() => new Array(10).fill(false)), action) => {\n    switch (action.type) {\n        case C.UPDATE_BOARD:\n            return action.payload;\n        default:\n            return state;\n    }\n}\n\nexport const gridSize = (state = 10, action) => {\n    switch (action.type) {\n        case C.UPDATE_SIZE:\n            return action.payload;\n        default:\n            return state;\n    }\n}\n\nexport const savedPatterns = (state = [], action) => {\n    switch (action.type) {\n        case C.SAVE_PATTERN:\n            return state.concat(action.payload).sort((a, b) => b.date - a.date)\n        case C.DELETE_PATTERN:\n            return state.filter(pattern => pattern.date !== action.payload)\n        default:\n            return state\n    }\n}\n\nexport const currPattern = (state = \"initial\", action) => {\n    switch (action.type) {\n        case C.SELECT_PATTERN:\n            return action.payload;\n        default:\n            return state\n    }\n}\n\nexport const score = (state = 0, action) => {\n    switch (action.type) {\n        case C.UPDATE_SCORE:\n            return action.payload;\n        default:\n            return state;\n    }\n}\n\nexport const timer = (state = 500, action) => {\n    switch (action.type) {\n        case C.UPDATE_TIMER:\n            return action.payload;\n        default:\n            return state;\n    }\n}\n\nexport const torusMode = (state = false, action) => {\n    switch (action.type) {\n        case C.TOGGLE_TORUS:\n            return action.payload;\n        default:\n            return state;\n    }\n}\n\nexport default combineReducers({\n    startstop,\n    timer,\n    board: combineReducers({\n        boardTiles,\n        gridSize,\n        score,\n        savedPatterns,\n        currPattern,\n        torusMode,\n    })\n})","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './CSS/index.css';\nimport App from './Components/App';\nimport * as serviceWorker from './serviceWorker';\nimport initStore from './ReduxUtil';\nimport { Provider } from 'react-redux';\n\nconst store = initStore();\nwindow.store = store;\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App/>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import { createStore, applyMiddleware } from 'redux'\nimport appReducer from './reducers'\nimport thunk from 'redux-thunk'\n\nexport default () => {\n\treturn createStore(appReducer, applyMiddleware(thunk));\n}\n\n// export default (initialState={}) => {\n// \treturn applyMiddleware(thunk)(createStore)(appReducer, initialState)\n// }"],"sourceRoot":""}